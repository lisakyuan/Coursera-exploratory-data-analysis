xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
swirl()
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone ~ Month, airquality)
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylabe = "Ozone(ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone(ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone(ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
name(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Qzone, set = "n")
plot(airquality$Wind, airquality$Qzone, type = "n")
plot(airquality$Wind, type = "n", airquality$Ozone)
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, month == 5)
names(airquality)
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone, pch = 17, col = "blue")
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, pch = 8, col = "red")
legend("topright", pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months")
legend("topright", pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(median(airquality$Wind), lty = 2, lwd = 2)
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1, 2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar=c(4, 4, 2, 1), oma= c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd("./ExData_Plotting1")
setwd("./version-control/ExData_Plotting1")
getwd()
noism <- 1000
n <- 10
sd(apply(matrix(rnorm(nosim * n), noisim), 1, mean))
sd(apply(matrix(rnorm(noism * n), noism), 1, mean))
1/sqrt(n)
noism <- 1000
n <- 10
sd(apply(matrix(runif(noism * n), noism), 1, mean))
1/sqrt(12 * n)
install.packages("UsingR")
library(UsingR)
data(father.son)
x <- father.son$sheight
n <- length(x)
hist(father.son$sheight, col = "blue")
head(father.son)
library(swirl)
rm(list=ls())
install_from_swirl("Statistical Inference")
swirl()
dice_sqr
ex2_fair <- sum((dice_fair^2) * PDF)
ex2_fair <- sum((dice_fair^2) * PDF(dice_fair))
?PDF
ls()
dice_fair
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fair - 3.5^2
dice_high
sum(dice_sqr * dice_high) - edh ^2
sd(apply(matrix(rnorm(10000), 1000), 1, mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000), 1000), 1, mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000, 4), 1000), 1, mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1, 10000, TRUE), 1000), 1, mean))
p <- c(.1, .2, .3, .4)
x <- 2:5
?var
p*var(x)
var(p*x)
sum(x^2*p) - sum((x*p)^2)
sum(x^2*p) - sum(x*p)^2
choose()8, 7) * .5 ^ 8 + choose(8, 8) * .5 ^ 8
choose(8, 7) * .5 ^ 8 + choose(8, 8) * .5 ^ 8
pbinom(6, size = 8, prob = 0.5, lower.tail = FALSE)
qnorm(.95, mean = 0, sd = 1)
pnorm(1,160, mean = 1020, sd = 50, lower.tail = FALSE)
qnorm(.75, mean = 1020, sd = 50, lower.tail = TRUE)
ppois(3, lamdba = 2.5 * 4)
ppois(3, lamdba = 2.5*4)
ppois(3, 2.5*4)
pbinom(2, size = 500, prob = 0.01)
ppois(2, lambda = 500*0.01)
swirl()
choose(3, 5) * 0.8^3 * 0.2^2
choose(5, 3) * 0.8^3 * 0.2 ^2
choose(5, 3) * 0.8^3 * 0.2 ^2 + choose(5, 4) * 0.8 ^4 * 0.2^1 + choose(5, 5) *0.8^5*0.2^0
pbinom(2, 5, prob = 0.8, lower.tail = FALSE)
qnorm(.10, mean = 0, sd = 1)
0
qnorm(.975, mean = 3, sd = 2)
3 + 2*1.96
pnorm(1200, mean = 1020, sd = 50, lower.tail = FALSE)
info
pnorm((1200-1020)/50, lower.tail = FALSE)
qnorm(.75, mean = 1020, sd = 50)
pnorm(qnorm(.53))
qnorm(pnorm(.53))
ppois(3, lambda = 2.5 * 4, lower.tail = TRUE, log.p = FALSE)
pbinom(5, 1000, prob = 0.01, lower.tail = TRUE, log.p = FALSE)
ppois(5, lambda = 1000 * 0.01)
library(swirl)
rm(list=ls())
install_from_swirl("Exploratory Data Analysis")
swirl()
p <- xyplot(Ozone~Wind, data=airquality)
print(p)
r(p)
info()
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits']"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2, 1))
v1
v2
myedit("plot1.R")
pathtofile("plot1.R", local=TRUE)
pathtofile("plot1.R", local = TRUE)
pathtofile("plot1.R")
source(pathtofile("plot1.R"), local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit(myLabels.R)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat|color*cut, data=diamonds, strip=FALSE, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price~carat|color*cut, data=diamonds, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
sample(color(), 10)
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(0, 1, len=6)
pal(seq(0, 1, len=6)
)
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = .5)
p3(5)
plot(x, y, pch = 19, col = rgb(0, .5, .5))
plot(x, y, pch = 19, col = rgb(0, .5, .5, .3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col=pal(20))
image(volcano, col=pl(20))
image(volcano, col=p1(20))
library(swirl)
rm(list=is())
swirl()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
str(mgp)
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, col = drv)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data=mpg, color = drv)
myhigh
qplot(drv, hwy, data=mpg, geom="boxplot")
qplot(drv, hwy, data=mpg, geom="boxplot", color = manufacturer)
qplot(hwy, data=mpg, fill = drv)
qplot(displ, hwy, data=mpg, facets = .~drv)
qplot(hwy, data=mpg, facets = drv~., binwidth=2)
qplot(displ, hwy, data=mpg, goem = c("point", "smooth"), facets = .~drv, method="loess")
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets = .~drv, methods = "loess")
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets = .~drv, method = "loess")
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets = .~drv, "loess")
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets = .~drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,smooth="loess")
install.packages("GGally")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
library(ggplot2)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,stat_smooth = "loess")
info()
bye()
remove.packages("ggplot2", lib="~/R/win-library/3.2")
install.packages("https://cran.revolutionanalytics.com/bin/windows/contrib/3.0/ggplot2_1.0.1.zip")
install.packages("ggplot2")
source('~/R/Coursera/Exploratory/swirlPractice.R', echo=TRUE)
library(ggplot2)
swirl()
install.packages("https://cran.revolutionanalytics.com/bin/windows/contrib/3.0/ggplot2_1.0.1.zip")
library(ggplot2)
library(ggplot2)
remove.packages("ggplot2", lib="~/R/win-library/3.2")
install.packages("ggplot2")
source('~/R/Coursera/Exploratory/swirlPractice.R', echo=TRUE)
qplot(displ, hwy, data=mpg, geom = c("point", "smooth", facets = .~drv, method="loess"))
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets = .~drv, method="loess")
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets = .~drv)
info()
skip()
swirl()
skip()
swirl()
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets = .~drv)
(play)
play()
nxt()
skip()
swirl()
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets = .~drv)
remove.packages("ggplot2", lib="~/R/win-library/3.2")
bye()
library(ggplot2)
swirl()
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets = .~drv, method="loess")
source('~/R/Coursera/Exploratory/swirlPractice.R', echo=TRUE)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets = .~drv, method="loess")
g <- ggplot(mpg, displ, hwy)
g <- ggplot(data=mpg, displ, hwy)
g <- ggplot(displ, hwy, data=mpg)
head(mpg)
g <- ggplot(mpg, aes(displ, hwy))
g
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color = "pint", size = 4, alpha = 1/2)
g+geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g+geom_point(aes(color=drv))+labs(title = "Swirl Rules", x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv), size = 2, alpha = 1/2) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(bese_family="Times")
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
plot(myx, myy,type="1", ylim=c(-3, 3), type="1")
plot(myx, myy,type="1", ylim=c(-3, 3), type="l")
plot(myx, myy,type="1", ylim=c(-3, 3))
plot(myx, myy,type="l", ylim=c(-3, 3))
ggplot(testdat, aes(x=myx, y=myy))
g <- ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
g+geom_line(ylim=c(-3, 3))
g+geom_line + ylim(-3, 3)
g+geom_line() + ylim(-3, 3)
g+geom_line() + coord_cartesian(ylim=c(-3, 3))
g <- ggplot(mpg, aes(x=displ, y=hwy, aes(color=factor(year))))
g <- ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(dry~cyl, margin=TRUE)
g+geom_point()+facet_grid(dry~cyl, margins=TRUE)
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules")
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape = cut)
qplot(carat, price, data=diamonds, color = cut)
qplot(carat, price, data=diamonds, color = cut, geom=c("point", "smooth"), method="lm")
qplot(carat, price, data=diamonds, color = cut, geom=c("point", "smooth"), method="lm", facets=.~cut)
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length=4), na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g+geom_points(alpha=1/3)+facet_grid(cut~car2)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd, ]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot() + facet_grid(.~cut)
bye()
?lattice
library(datasets)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
library(datasets); data(ChickWeight); library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1:2)] <- paste("time", names(wideCW)[-(1:2)], sep = "")
library(dplyr)
wideCW <- mutate(wideCW, gain=time21-time0)
ls()
head(ChickWeight)
head(WideCW)
head(wideCW)
source('~/R/Coursera/Exploratory/swirlPractice.R', echo=TRUE)
myplot(2)
myplot(20)
myplot2(2)
qt(.975, 2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2 - g1
mean(difference)
sd(difference)
s <- sd(difference)
mn + c(-1, 1) * 0.975 * s/sqrt(10)
mn+c(-1,1)*qt(.975, 9)*s/sqrt(10)
t.test(difference)$conf.int
sp <- 7*15.34^2 + 20*18.23^2
ns <- 7+20
sp <- sqrt(sp/ns)
(132.86-127.44)+c(-1, 1)*qt(0.975, ns)*sp*sqrt(1/8 + 1/21)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp <- (var(g1) + var(g2))/18
sp <- sqrt(9*var(g1)+9*var(g2))/18
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md+c(-1,1)*qt(.975,18)*sp*sqrt(1/10+1/10)
t.test(g2, g1, paired=FALSE, var.equal=TRUE)$conf.
t.test(g2, g1, paired=FALSE, var.equal=TRUE)$conf
t.test(g2, g1, paired=TRUE)$conf
num <- (15.34^2/8 + 18.23^2/21)^2
den <- (15.34^2/8)^2/(8-1) + (18.23^2)/21)^2/(21-1)
den <- (15.34^2/8)^2/(8-1) + (18.23^2/21)^2/(21-1)
mydf <- num/den
(132.86-127.44)+c(-1,1)*qt(.975, mydf)*(15.34^2/7+18.23^2/20)
(132.86-127.44)+c(-1,1)*qt(.975, mydf)*sqrt(15.34^2/8+18.23^2/21)
132.86-127.44+c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8+18.23^2/21)
1
2
2/(10/sqrt(16))
15
qt(0.95, 15)
dim(fs)
t.test(fs$sheight -fs$fheight)
11.7885 *sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
7
8
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=1, col="red")
abline(h=.4, col="red")
5
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y,newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=clos1, pch=9, cex=2, lwd=2)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x, y, col=kmObj$cluster, phc=19, cex=2)
plot(x, y, col=kmObj$cluster, pch=19, cex=2)
points(kmObj$center, col=c("black","red","green"), pch=3, cex=3, lwd=3)
points(kmObj$center,col=c("black","red","green"),pch=3,cex=3,lwd=3)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu%*%diag%*%t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd$v[,1]
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[, 1:2]
svd2$d
getwd()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
PM25 <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_code.rds")
names(PM25)
str(PM25)
head(PM25)
tail(PM25)
names(SCC)
dim(SCC)
aggData <- aggregate(Emmissions ~ year, data=PM25, fun=sum)
aggData <- aggregate(Emissions ~ year, data=PM25, fun=sum)
aggData <- aggregate(Emissions ~ year, data=PM25, FUN=sum)
names(aggData)
plot(aggData$year, aggData$Emissions, type = "l", xlab="Year", ylab="Total"~PM[2.5]~"Emissions(tons)"), main=expression("Total US" ~ PM[2.5] ~ "Emissions by Year"))
plot(aggData$year, aggData$Emissions, type = "l", xlab="Year", ylab="Total"~PM[2.5]~"Emissions(tons)", main=expression("Total US" ~ PM[2.5] ~ "Emissions by Year"))
boxplot(aggData$year, aggData$Emmisions)
boxplot(aggData$Emmisions, names.arg = aggdata$year, col = "blue", xlab = "year", ylab = "PM2.5 Emissions (Tons)", main = "PM2.5 Emissions for all US Sources (Total)")
boxplot(aggData$Emmisions, names.arg = aggData$year, col = "blue", xlab = "year", ylab = "PM2.5 Emissions (Tons)", main = "PM2.5 Emissions for all US Sources (Total)")
boxplot(aggData$Emmisions/(10^6), names.arg = aggData$year, col = "blue", xlab = "year", ylab = "PM2.5 Emissions (10^6 Tons)", main = "PM2.5 Emissions for all US Sources (Total)")
barplot(aggData$Emmisions/(10^6), names.arg = aggData$year, col = "blue", xlab = "year", ylab = "PM2.5 Emissions (10^6 Tons)", main = "PM2.5 Emissions for all US Sources (Total)")
hist(aggData$Emmisions/(10^6), names.arg = aggData$year, col = "blue", xlab = "year", ylab = "PM2.5 Emissions (10^6 Tons)", main = "PM2.5 Emissions for all US Sources (Total)")
hist(aggData$Emmisions/(10^6), col = "blue", xlab = "year", ylab = "PM2.5 Emissions (10^6 Tons)", main = "PM2.5 Emissions for all US Sources (Total)")
hist(aggData$Emmisions, col = "blue", xlab = "year", ylab = "PM2.5 Emissions (Tons)", main = "PM2.5 Emissions for all US Sources (Total)")
class(aggData$Emmisions)
hist(as.numeric(as.character(aggData$Emmisions)), col = "blue", xlab = "year", ylab = "PM2.5 Emissions (Tons)", main = "PM2.5 Emissions for all US Sources (Total)")
dim(aggData)
barplot(aggData$Emissions, name.arg=aggData$year, col = "blue")
barplot(aggData$Emissions/10^6, name.arg=aggData$year, col = "blue")
barplot(aggData$Emissions/10^6, names.arg=aggData$year, col = "blue")
barplot(aggData$Emissions/10^6, names.arg=aggData$year, col = "blue")
barplot(aggData$Emissions/10^6, names.arg=aggData$year, col = "green", xlab = "Year", ylab="PM2.5 Emissions (10^6 Tons)", main="PM2.5 Emissions for US Sources by Year")
png(filename="plot1.png", width=480, height=480, units="px")
xlab = "Year", ylab="PM2.5 Emissions (10^6 Tons)", main="PM2.5 Emissions for US Sources by Year")
xlab = "Year", ylab="PM2.5 Emissions (10^6 Tons)", main="PM2.5 Emissions for US Sources by Year")
barplot(aggData$Emissions/10^6, names.arg=aggData$year, col = "blue",xlab = "Year", ylab="PM2.5 Emissions (10^6 Tons)", main="PM2.5 Emissions for US Sources by Year")
col = "blue",xlab = "Year", ylab="PM2.5 Emissions (10^6 Tons)", main="PM2.5 Emissions for US Sources by Year")
png(filename="plot1.png", width=480, height=480, units="px")
main="PM2.5 Emissions for US Sources by Year")
main="PM2.5 Emissions for US Sources by Year")
main="PM2.5 Emissions for US Sources by Year")
)
main= "PM2.5 Emissions for US Sources by Year")
main= "PM2.5 Emissions for US Sources by Year"
source('~/R/Coursera/Exploratory/Project2/plot1.R', echo=TRUE)
getwd()
PM25 <- readRDS("summarySCC_PM25.rds")
aggData <- aggregate(Emissions ~ year, data=PM25, fun=sum)
png(filename="plot1.png", width=480, height=480, units="px")
main= "PM2.5 Emissions for US Sources by Year")
main= "PM2.5 Emissions for US Sources by Year"))
barplot((aggData$Emissions)/10^6, names.arg=aggData$year, col = "blue",xlab = "Year", ylab= "PM2.5 Emissions (10^6 Tons)", main= "PM2.5 Emissions for US Sources by Year")
aggData <- aggregate(Emissions ~ year, data=PM25, fun=sum)
aggData <- aggregate(Emissions ~ year, data=PM25, FUN=sum)
png(filename="plot1.png", width=480, height=480, units="px")
barplot((aggData$Emissions)/10^6, names.arg=aggData$year, col = "blue",xlab = "Year", ylab= "PM2.5 Emissions (10^6 Tons)", main= "PM2.5 Emissions for US Sources by Year")
barplot((aggData$Emissions)/10^6, names.arg=aggData$year, col = "blue",xlab = "Year", ylab= "PM2.5 Emissions (10^6 Tons)", main= "PM2.5 Emissions for US Sources by Year")
plot(Emissions, year, data=aggData, type = "l")
plot(aggData$Emissions, aggData$year, type = "l")
